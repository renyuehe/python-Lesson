import subprocess
subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)
# 其中args值的是需要传入的要执行的程序路径(字符串)，如果是列表的话，第一项是程序的路径，后面的参数是执行该程序所需要的参数，这个与popen一致。

# 下面是各个参数的详解
# bufsize 指定缓冲，0 无缓冲， 1 行缓冲 其他正值 缓冲区大小  负值 采用的默认系统缓冲(一般是全缓冲)
# executable： 用于指定可执行程序。一般情况下我们通过args参数来设置所要运行的程序。如果将参数shell设为 True，executable将指定程序使用的shell。在windows平台下，默认的shell由COMSPEC环境变量来指定。
# stdin stdout stderr 三者是成程序的标准输入、标准输出、错误句柄。可以赋值为None(没有任何重定向，继承父进程)、PIPE(创建管道)、文件对象、文件描述符(整数)等,其中stderr还是可以设置成STDOUT，
# preexc_fn：只是在Unix下生效，用于指定一个可执行对象,它将在子进程运行之前被调用。
# close_sfs：在windows平台下，如果如果该参数被设置成True，那么新创建的子进程将不会继承父进程的输入输出错误管道，我们不能将该函数设置为True同时重定向子进程的标准输入输出与错误。
# shell：在unix下就是相当于在args前面添加了"/bin/sh /c" 在windows下相当于添加了"cmd.exe /c"
# cmd：设置子进程的工作目录
# env：字典类型，用于指定子进程的环境变量，如果env=None,那么子进程的环境变量将从父进程中继承
# Universal_newlines:不同操作系统下，文本的换行符是不一样的。如：windows下用'/r/n'表示换，而Linux下用 '/n'。如果将此参数设置为True，Python统一把这些换行符当作’/n’来处理。
# 参数startupinfo与createionflags只在windows下有效，它们将被传递给底层的CreateProcess()函数，用 于设置子进程的一些属性，如：主窗口的外观，进程的优先级等等。